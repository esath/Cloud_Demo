---

##############################################################################
# Play 1 - Create 'x' instances in Openstack based on 'count' var
##############################################################################

- name: Deploy multiple duplicate cloud instances in OpenStack
  hosts: localhost

  vars:
    image: VYOS_1.1.7
    network: cloudy-test-net
#    key_name: example-key
    flavor: sonera.linux.tiny
    security_groups: default
    count: 1

  tasks:
    - name: Connect to the Cloud
      # assume RC file has already been sourced
      os_auth:

    - name: Launch web instances
      os_server:
        name: vyos_x{{ item }}
        flavor: "{{ flavor }}"
        image: "{{ image }}"
#        key_name: "{{ key_name }}"
        state: present
        wait: true
        network: "{{ network }}"
        security_groups: "{{ security_groups }}"
        auto_ip: true
      register: newnodes
      with_sequence:
        count={{ count }}

    - add_host: name={{ item.server.public_v4 }}
                groups=created_nodes
                ansible_user=vyos
                ansible_ssh_pwd=tsfcloud
                instance_name={{ item.server.name }}
      with_items: "{{ newnodes.results }}"

##############################################################################
# Play 2 - Configure nodes from in-memory inventory
##############################################################################
- name: Configure router
  hosts: created_nodes
  become: yes
  become_method: sudo
  gather_facts: false
  tasks:

#    - name: "Wait for SSH banners"
#      local_action: wait_for port=22 host="{{ inventory_hostname }}" search_regex=login delay=5
#      become: False

    - name: WAIT SSH
      wait_for:
        port=22
        delay=1
        timeout=300

    - script: ./vyos_conf.sh
      register: sh_result
    - debug: var=sh_result.stdout_lines


#    - name: install apps
#      apt: name={{ item }} update_cache=yes state=latest
#      with_items:
#        - htop
#        - git
#
#    - name: Pause play to interact with the servers
#      pause: prompt="Playbook paused... hit <enter> to continue or <ctrl-c a> to abort"

